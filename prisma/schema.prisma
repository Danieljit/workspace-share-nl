// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  hashedPassword String?    // Changed from password to hashedPassword
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]   
  sessions      Session[]   
  spaces        Space[]     // Spaces owned by the user
  bookings      Booking[]   // Bookings made by the user
  reviews       Review[]    // Reviews written by the user
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Space {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  title           String
  description     String    @db.Text
  workspaceType   SpaceType
  
  // Workspace details (stored as JSON for flexibility)
  workspaceDetails Json?
  
  // Location information
  address         String
  city            String
  postalCode      String
  country         String    @default("Netherlands")
  unitNumber      String?
  coordinates     Json?     // { lat: number, lng: number }
  directions      String?   @db.Text
  transportInfo   String?   @db.Text
  parkingInfo     String?   @db.Text
  
  // Building context
  buildingContext Json?
  
  // Amenities (array of amenity IDs)
  amenities       Json?     // string[]
  
  // Photos (array of photo URLs)
  photos          Json?     // string[]
  
  // Availability schedule
  availability    Json?     // Structured availability by day
  
  // Pricing tiers
  pricePerDay     Float
  pricePerThreeDays Float?
  pricePerWeek    Float?
  pricePerMonth   Float?
  
  // Host information
  hostName        String
  hostEmail       String?
  hostPhone       String?
  preferredContact String?
  responseTime    String?
  hostInfo        String?   @db.Text
  
  // Relations
  ownerId         String
  owner           User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  bookings        Booking[]
  reviews         Review[]
}

model Booking {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  startDate DateTime
  endDate   DateTime
  status    BookingStatus @default(PENDING)
  totalPrice Float
  userId    String
  spaceId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  rating    Int
  comment   String
  userId    String
  spaceId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

enum SpaceType {
  DESK
  OFFICE
  MEETING_ROOM
  EVENT_SPACE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
