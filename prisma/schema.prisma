// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  hashedPassword String?    // Changed from password to hashedPassword
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  spaces        Space[]     // Spaces owned by the user
  bookings      Booking[]   // Bookings made by the user
  reviews       Review[]    // Reviews written by the user
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Space {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  type        SpaceType
  location    String
  amenities   String?   // JSON string of amenities
  price       Float
  capacity    Int
  images      String?   // JSON string of image URLs
  floorPlan   String?  // URL to floor plan image
  features    String?  // JSON string of detailed features
  availability String? // JSON string of available time slots
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  reviews     Review[]
}

model Booking {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  startDate DateTime
  endDate   DateTime
  status    BookingStatus @default(PENDING)
  totalPrice Float
  userId    String
  spaceId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  rating    Int
  comment   String
  userId    String
  spaceId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

enum SpaceType {
  DESK
  OFFICE
  MEETING_ROOM
  EVENT_SPACE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
